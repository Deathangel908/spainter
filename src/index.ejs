<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Spainter</title>
    <meta http-equiv="cache-control" content="no-cache" />
    <style>
        .pad1 {
            padding: 10px;
            box-sizing: border-box;
        }
        html, body, .pad1 {
            width: 100%;
            margin: 0;
            height:100%;
        }
        .active-icon {
            color: red;
        }
        #saveBlobExampleHolder {
            position: absolute;
            z-index: 1;
            display: block;
            background: white;
            padding: 10px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border: 1px dashed red;

        }
    </style>
    <% if (htmlWebpackPlugin.files.jsIntegrity) { %><script crossorigin="<%= webpackConfig.output.crossOriginLoading %>" integrity="<%= htmlWebpackPlugin.files.jsIntegrity[0] %>" type="text/javascript" src="<%= htmlWebpackPlugin.files.js[0] %>"></script><% } else{ %><script crossorigin="<%= webpackConfig.output.crossOriginLoading %>" type="text/javascript" src="<%= htmlWebpackPlugin.files.js[0] %>"></script><% } %>
    <% for (key in htmlWebpackPlugin.files.css) { %><link rel="stylesheet" type="text/css" href="<%= htmlWebpackPlugin.files.css[key] %>"><% } %>
</head>
<body>

<div class="pad1">
    <div id="containerPainer"></div>
    <div id="saveBlobExampleHolder" style="display: none">
        <img id="saveBlobExample"/>
        <input type="button" value="upload" id="uploadBtn"/>
        <input type="button" value="close" id="closebtn"/>
        <a id="textValue"></a>
    </div>
</div>

<script>
    const host = 'http://api.pychat.org';
    var p = new Painter(containerPainer, {
        logger: {
            debug: function log() {
                var args = Array.prototype.slice.call(arguments);
                var parts = args.shift().split('{}');
                var params = [window.console, '%c' + 'painter', 'red'];
                for (var i = 0; i < parts.length; i++) {
                    params.push(parts[i]);
                    if (typeof args[i] !== 'undefined') { // args can be '0'
                        params.push(args[i])
                    }
                }
                return Function.prototype.bind.apply(console.log, params);
            }
        },
        onBlobPaste: function(blob) {
            saveBlobExample.src = URL.createObjectURL(blob);
            saveBlobExampleHolder.style.display = 'block';
            textValue.style.display = 'none';

            uploadBtn.onclick = function() {
                var formData = new FormData();
                formData.append('file', blob, new Date().toDateString() + '.png');
                fetch(`${host}/upload_file`, {
                    method: "POST",
                    body: formData,
                }).then(e => {
                    return e.text();
                }).then(e => {
                    textValue.style.display = 'block';
                    let href = `${host}${e}`;
                    textValue.href = href;
                    textValue.textContent = href
                });
            }
        }
    })
    closebtn.onclick = function() {
        saveBlobExampleHolder.style.display = 'none';
    }

</script>
</body>
</html>
